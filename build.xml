<project name="restful-jetty" default="dist" basedir=".">
    <description>
        Project Description
    </description>

    <property environment="env"/>

    <!-- set global properties for this build -->
    <property name="projectName" value="${ant.project.name}"/>
    <property name="src" location="src"/>
    <property name="src.test" location="test"/>
    <property name="res" location="res"/>
    <property name="res.test" location="res-test"/>
    <property name="lib" location="lib"/>
    <property name="lib.test" location="lib-test"/>
    <property name="build" location="build"/>
    <property name="build.test" location="build-test"/>
    <property name="dist" location="dist"/>
    <property name="main.class" value=""/>

    <!-- define the project classpath -->
    <path id="project.classpath">
        <pathelement location="${build}"/>
        <fileset dir="${lib}" includes="**/*.jar" excludes="*source*"/>
    </path>

    <!-- define the project test classpath -->
    <path id="project.classpath.test">
        <path refid="project.classpath"/>
        <pathelement location="${build.test}"/>
        <fileset dir="${lib.test}" includes="**/*.jar" excludes="*source*"/>
    </path>

    <target name="dep" unless="env.NO_DEPENDENCIES">
    </target>

    <target name="init" depends="dep">

        <!-- Get the current git revision short hash -->
        <exec executable="git" outputproperty="git.revision">
            <arg value="log"/>
            <arg value="-1"/>
            <arg value="--pretty=format:%h"/>
        </exec>

        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${build}"/>
    </target>

    <target name="compile" depends="init" description="compile the source " >
        <!-- Compile the java code from ${src} into ${build} -->
        <javac srcdir="${src}" destdir="${build}" classpathref="project.classpath" includeantruntime="false"/>
        <!-- copy project and test resources to the build folders -->
        <copy todir="${build}" failonerror="false">
            <fileset dir="${res}"/>
        </copy>
    </target>

    <target name="compile-test" depends="init" description="compile test files">
        <mkdir dir="${build.test}"/>
        <!-- Compile the java code from ${src.test} into ${build.test} -->
        <javac srcdir="${src.test}" destdir="${build.test}" classpathref="project.classpath.test" includeantruntime="false"/>
        <!-- copy project and test resources to the build folders -->
        <copy todir="${build.test}" failonerror="false">
            <fileset dir="${res.test}"/>
        </copy>
    </target>

    <target name="test" depends="compile, compile-test" description="test the compiled sources">
        <junit printsummary="true">
            <classpath>
                <path refid="project.classpath.test"/>
                <pathelement location="${build.test}"/>
            </classpath>

            <formatter type="xml"/>

            <batchtest fork="yes" todir="${build.test}">
                <fileset dir="${src.test}" includes="**/*Test.java" />
            </batchtest>
        </junit>
    </target>

    <target name="dist" depends="compile" description="generate the distribution" >
        <!-- Create the distribution directory -->
        <delete dir="${dist}"/>
        <mkdir dir="${dist}"/>

        <copy todir="${dist}">
            <path refid="project.classpath" />
        </copy>

        <manifestclasspath property="jar.classpath" jarfile="${dist}/${projectName}-${git.revision}.jar">
            <classpath>
                <fileset dir="${dist}" />
            </classpath>
        </manifestclasspath>

        <!-- Put everything in ${build} into the {$projectName}-${DSTAMP}.jar file -->
        <jar jarfile="${dist}/${projectName}-${git.revision}.jar" basedir="${build}">
            <manifest>
                <attribute name="Main-Class" value="${main.class}"/>
                <attribute name="Class-Path" value="${jar.classpath}"/>
            </manifest>
        </jar>
    </target>

    <target name="clean" description="clean up" >

        <!-- Delete the ${build} and ${dist} directory trees -->
        <delete dir="${build}"/>
        <delete dir="${build.test}"/>
        <delete dir="${dist}"/>
    </target>
</project>